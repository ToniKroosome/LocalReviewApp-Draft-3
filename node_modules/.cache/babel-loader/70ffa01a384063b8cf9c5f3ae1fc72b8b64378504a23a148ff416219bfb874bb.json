{"ast":null,"code":"import { initialSampleReviews } from '../data/sampleReviews';\n\n// MOCK USER DATA\nconst mockUser = {\n  uid: 'mock-google-user-123',\n  displayName: 'Demo User',\n  photoURL: 'https://placehold.co/100x100/8e44ad/ffffff?text=DU'\n};\n\n// Mock Firebase for preview environment\nconst mockAuth = {\n  currentUser: null,\n  onAuthStateChanged: callback => {\n    const user = mockAuth.currentUser;\n    setTimeout(() => callback(user), 100);\n    return () => {};\n  },\n  // SIMULATE Google Sign-In\n  signInWithGoogle: () => {\n    mockAuth.currentUser = mockUser;\n    return Promise.resolve({\n      user: mockAuth.currentUser\n    });\n  },\n  signOut: () => {\n    mockAuth.currentUser = null;\n    return Promise.resolve();\n  }\n};\nconst mockFirestore = {\n  collection: path => ({\n    query: () => ({\n      onSnapshot: callback => {\n        setTimeout(() => {\n          callback({\n            docs: initialSampleReviews.map(item => ({\n              id: item.id,\n              data: () => item\n            }))\n          });\n        }, 100);\n        return () => {};\n      }\n    })\n  }),\n  addDoc: (collectionRef, data) => {\n    console.log(\"Mock Firestore: addDoc called with\", data);\n    return Promise.resolve({\n      id: `mock-doc-${Date.now()}`\n    });\n  },\n  setDoc: (docRef, data) => {\n    console.log(\"Mock Firestore: setDoc called for\", docRef.id, \"with\", data);\n    return Promise.resolve();\n  },\n  getDocs: q => Promise.resolve({\n    docs: initialSampleReviews.map(item => ({\n      id: item.id,\n      data: () => item\n    }))\n  }),\n  doc: (collectionRef, id) => ({\n    id\n  })\n};\nexport const auth = mockAuth;\nexport const db = mockFirestore;\nexport const collection = path => mockFirestore.collection(path);\nexport const query = collectionRef => collectionRef.query();\nexport const onSnapshot = (queryRef, callback) => queryRef.onSnapshot(callback);\nexport const doc = (collectionRef, id) => mockFirestore.doc(collectionRef, id);\nexport const setDoc = mockFirestore.setDoc;\nexport const addDoc = mockFirestore.addDoc;\nexport const getDocs = queryRef => mockFirestore.getDocs(queryRef);\nexport const onAuthStateChanged = (authInstance, callback) => mockAuth.onAuthStateChanged(callback);\nexport const signInWithGoogle = mockAuth.signInWithGoogle;\nexport const signOut = mockAuth.signOut;","map":{"version":3,"names":["initialSampleReviews","mockUser","uid","displayName","photoURL","mockAuth","currentUser","onAuthStateChanged","callback","user","setTimeout","signInWithGoogle","Promise","resolve","signOut","mockFirestore","collection","path","query","onSnapshot","docs","map","item","id","data","addDoc","collectionRef","console","log","Date","now","setDoc","docRef","getDocs","q","doc","auth","db","queryRef","authInstance"],"sources":["/Users/thanapruetprayoonphrom/LocalReviewApp-Draft-3/LocalReviewApp-Draft-3/src/utils/mockFirebase.js"],"sourcesContent":["import { initialSampleReviews } from '../data/sampleReviews';\n\n// MOCK USER DATA\nconst mockUser = {\n    uid: 'mock-google-user-123',\n    displayName: 'Demo User',\n    photoURL: 'https://placehold.co/100x100/8e44ad/ffffff?text=DU'\n};\n\n// Mock Firebase for preview environment\nconst mockAuth = {\n    currentUser: null,\n    onAuthStateChanged: (callback) => {\n        const user = mockAuth.currentUser;\n        setTimeout(() => callback(user), 100);\n        return () => {};\n    },\n    // SIMULATE Google Sign-In\n    signInWithGoogle: () => {\n        mockAuth.currentUser = mockUser;\n        return Promise.resolve({ user: mockAuth.currentUser });\n    },\n    signOut: () => {\n        mockAuth.currentUser = null;\n        return Promise.resolve();\n    }\n};\n\nconst mockFirestore = {\n    collection: (path) => ({\n        query: () => ({\n            onSnapshot: (callback) => {\n                setTimeout(() => {\n                    callback({\n                        docs: initialSampleReviews.map((item) => ({\n                            id: item.id,\n                            data: () => item\n                        }))\n                    });\n                }, 100);\n                return () => {};\n            }\n        })\n    }),\n    addDoc: (collectionRef, data) => {\n        console.log(\"Mock Firestore: addDoc called with\", data);\n        return Promise.resolve({ id: `mock-doc-${Date.now()}` });\n    },\n    setDoc: (docRef, data) => {\n        console.log(\"Mock Firestore: setDoc called for\", docRef.id, \"with\", data);\n        return Promise.resolve();\n    },\n    getDocs: (q) => Promise.resolve({ docs: initialSampleReviews.map((item) => ({ id: item.id, data: () => item })) }),\n    doc: (collectionRef, id) => ({ id })\n};\n\nexport const auth = mockAuth;\nexport const db = mockFirestore;\nexport const collection = (path) => mockFirestore.collection(path);\nexport const query = (collectionRef) => collectionRef.query();\nexport const onSnapshot = (queryRef, callback) => queryRef.onSnapshot(callback);\nexport const doc = (collectionRef, id) => mockFirestore.doc(collectionRef, id);\nexport const setDoc = mockFirestore.setDoc;\nexport const addDoc = mockFirestore.addDoc;\nexport const getDocs = (queryRef) => mockFirestore.getDocs(queryRef);\nexport const onAuthStateChanged = (authInstance, callback) => mockAuth.onAuthStateChanged(callback);\nexport const signInWithGoogle = mockAuth.signInWithGoogle;\nexport const signOut = mockAuth.signOut;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}